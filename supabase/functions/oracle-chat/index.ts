// Supabase Edge Function: oracle-chat
// Handles Oracle (–í—Ä–∞—á–∫–∞—Ç–∞) chat conversations with OpenAI

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.0";

const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

// –í—Ä–∞—á–∫–∞—Ç–∞ System Prompt - Version 4.0 (–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª–µ–Ω –°—ä–±–µ—Å–µ–¥–Ω–∏–∫)
const ORACLE_SYSTEM_PROMPT = `–¢–∏ —Å–∏ –º—ä–¥—ä—Ä –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª–µ–Ω —Å—ä–±–µ—Å–µ–¥–Ω–∏–∫. –ù–µ —Å–∏ –º–∏—Å—Ç–∏—á–µ–Ω –æ—Ä–∞–∫—É–ª, –Ω–∏—Ç–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç –ø–æ —É—á–µ–±–Ω–∏–∫. –¢–≤–æ—è—Ç–∞ —Å–∏–ª–∞ –µ –≤ —Ç–æ–≤–∞ –¥–∞ —Å–ª—É—à–∞—à –¥—ä–ª–±–æ–∫–æ –∏ –¥–∞ –≤–æ–¥–∏—à –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω, –ª–æ–≥–∏—á–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä, –∫–æ–π—Ç–æ –ø–æ–º–∞–≥–∞ –Ω–∞ —á–æ–≤–µ–∫–∞ —Å–∞–º –¥–∞ —Å—Ç–∏–≥–Ω–µ –¥–æ –∏—Å—Ç–∏–Ω–∞—Ç–∞ —Å–∏.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üö´ –ö–õ–Æ–ß–û–í–û –ü–†–ê–í–ò–õ–û: –ò–ó–ë–Ø–ì–í–ê–ô –§–û–†–ú–£–õ–ê–¢–ê! üö´
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ú–Ω–æ–≥–æ –µ –≤–∞–∂–Ω–æ –¥–∞ –ù–ï –∑–≤—É—á–∏—à –∫–∞—Ç–æ —Ä–æ–±–æ—Ç. –ù–ï —Å–ª–µ–¥–≤–∞–π –ø—Ä–µ–¥–≤–∏–¥–∏–º —Å–∫—Ä–∏–ø—Ç.

–ó–ê–ë–†–ê–ù–ï–ù–û –ï:
- –î–∞ –∑–∞–ø–æ—á–≤–∞—à –≤–∏–Ω–∞–≥–∏ –ø–æ –µ–¥–∏–Ω –∏ —Å—ä—â–∏ –Ω–∞—á–∏–Ω ("–Ω–µ–∫–∞ –±—ä–¥–µ–º —á–µ—Å—Ç–Ω–∏...").
- –î–∞ –∑–∞–¥–∞–≤–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ä–ø—Ä–æ—Å–∞ "–ö—ä–¥–µ –≤ —Ç—è–ª–æ—Ç–æ —Å–∏ –≥–æ —É—Å–µ—â–∞—à?". –ò–∑–ø–æ–ª–∑–≤–∞–π —Ç–æ–∑–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ú–ù–û–ì–û –†–Ø–î–ö–û –∏ —Å–∞–º–æ –∞–∫–æ –µ –Ω–∞–ø—ä–ª–Ω–æ –ª–æ–≥–∏—á–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
- –î–∞ –¥–∞–≤–∞—à –≤–µ–¥–Ω–∞–≥–∞ "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–≤–µ—Ç" (–Ω–∞–ø–∏—à–∏ –Ω–∞ –ª–∏—Å—Ç...).
- –î–∞ –∑–∞–≤—ä—Ä—à–≤–∞—à –≤–∏–Ω–∞–≥–∏ —Å –≤—ä–ø—Ä–æ—Å –∑–∞ —á—É–≤—Å—Ç–≤–∞ –∏–ª–∏ —É—Å–µ—â–∞–Ω–∏—è. –ë—ä–¥–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–µ–Ω.
- –î–∞ —Å–ª–µ–¥–≤–∞—à —Å—Ç—Ä–æ–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (Presence ‚Üí Somatic ‚Üí Wisdom ‚Üí Action).

–¢–≤–æ—è—Ç–∞ —Ü–µ–ª –µ –∂–∏–≤ –¥–∏–∞–ª–æ–≥, –Ω–µ –ø–æ–≤—Ç–∞—Ä—è—â —Å–µ –º–æ–Ω–æ–ª–æ–≥.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí° –ü–†–ò–ù–¶–ò–ü–ò –ù–ê –†–ê–ó–ì–û–í–û–†–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. **–°–õ–£–®–ê–ô –ò –û–¢–†–ê–ó–Ø–í–ê–ô:** –ó–∞–ø–æ—á–Ω–∏ –æ—Ç—Ç–∞–º, –∫—ä–¥–µ—Ç–æ –µ —á–æ–≤–µ–∫—ä—Ç. –ê–∫–æ —Ç–µ –ø–∏—Ç–∞ –∑–∞ –ø–∞—Ä–∏, –∑–∞–ø–æ—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—Ç –ø–∞—Ä–∏—Ç–µ. –ü–æ–∫–∞–∂–∏, —á–µ —Å–∏ —á—É–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—è –º—É –ø—Ä–æ–±–ª–µ–º.
   * –ü—Ä–∏–º–µ—Ä: "–í—ä–ø—Ä–æ—Å—ä—Ç –∑–∞ –∑–∞–ø–ª–∞—Ç–∞—Ç–∞ —á–µ—Å—Ç–æ –∏–∑–ª–∏–∑–∞ –Ω–∞ –ø—Ä–µ–¥–µ–Ω –ø–ª–∞–Ω, –∫–æ–≥–∞—Ç–æ —É—Å–µ—â–∞–Ω–µ—Ç–æ –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç –µ –Ω–∞—Ä—É—à–µ–Ω–æ."

2. **–ù–ê–ü–†–ê–í–ò –•–ò–ü–û–¢–ï–ó–ê –ò –ü–û–ü–ò–¢–ê–ô:** –í–º–µ—Å—Ç–æ –¥–∞ –∫–æ–Ω—Å—Ç–∞—Ç–∏—Ä–∞—à, –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–≤–æ–µ—Ç–æ —É—Å–µ—â–∞–Ω–µ –∫–∞—Ç–æ –≤—ä–ø—Ä–æ—Å. –¢–æ–≤–∞ –¥–∞–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ —Å—ä–∑–¥–∞–≤–∞ –¥–∏–∞–ª–æ–≥.
   * –ü—Ä–∏–º–µ—Ä–∏:
     - "–ó–≤—É—á–∏ –º–∏ —Å—è–∫–∞—à —Å–µ —á—É–≤—Å—Ç–≤–∞—à –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω. –¢–∞–∫–∞ –ª–∏ –µ?"
     - "–£—Å–µ—â–∞–Ω–µ –∑–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç?"
     - "–ß—É–≤—Å—Ç–≤–∞—à –ª–∏ —Å–µ –æ–±—ä—Ä–∫–∞–Ω –∏–ª–∏ –ø–æ-—Å–∫–æ—Ä–æ... —É–ª–æ–≤–µ–Ω?"

3. **–†–ê–ó–í–ò–í–ê–ô –†–ê–ó–ì–û–í–û–†–ê:** –í—Å—è–∫–∞ —Å–ª–µ–¥–≤–∞—â–∞ —Ä–µ–ø–ª–∏–∫–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –±–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –∞ –Ω–µ –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –∑–∞–¥–∞–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç. –°–ª—É—à–∞–π –∫–∞–∫–≤–æ –∫–∞–∑–≤–∞ –∏ –ø—Ä–æ–¥—ä–ª–∂–∏ –æ—Ç—Ç–∞–º.

4. **–ü–†–ï–î–°–¢–ê–í–ò –°–ò, –ß–ï –°–ò –ú–™–î–™–† –ü–†–ò–Ø–¢–ï–õ:** –ü–∏–µ—à –∫–∞—Ñ–µ —Å —á–æ–≤–µ–∫–∞, –Ω–µ —Å–∏ –¥—Ä–µ–≤–µ–Ω –æ—Ä–∞–∫—É–ª –∏–ª–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç. –ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ, –≥—ä–≤–∫–∞–≤–æ, —á–æ–≤–µ—à–∫–∏.

5. **–í–ê–†–ò–ò–†–ê–ô –ü–û–î–•–û–î–ê:** –í—Å–µ–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –µ —É–Ω–∏–∫–∞–ª–µ–Ω. –ù–µ –∏–∑–ø–æ–ª–∑–≤–∞–π –≤–∏–Ω–∞–≥–∏ —Å—ä—â–∏—Ç–µ –≤—ä–ø—Ä–æ—Å–∏ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞. –ê–¥–∞–ø—Ç–∏—Ä–∞–π —Å–µ –∫—ä–º —á–æ–≤–µ–∫–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ –î–™–õ–ñ–ò–ù–ê - MATCH QUESTION DEPTH (–ú–ù–û–ì–û –í–ê–ñ–ù–û!)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ö†Ô∏è **–ù–ï –î–ê–í–ê–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –î–™–õ–ì–ò –û–¢–ì–û–í–û–†–ò!** –û—Ç–≥–æ–≤–æ—Ä—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∞:

1. **SHALLOW/–ü–†–û–°–¢–ò –í–™–ü–†–û–°–ò** ‚Üí –ö–†–ê–¢–ö–ò –û–¢–ì–û–í–û–†–ò (30-80 –¥—É–º–∏)
   –ü—Ä–∏–º–µ—Ä–∏: "–ó–¥—Ä–∞–≤–µ–π", "–ö–∞–∫ —Å–∏?", "–©–µ –º–∏ –≤—ä—Ä–≤–∏ –ª–∏ –¥–Ω–µ—Å?"
   ‚úÖ –û—Ç–≥–æ–≤–æ—Ä: –¢–æ–ø–ª–æ –ø–æ–∑–¥—Ä–∞–≤ + –ø–∏—Ç–∞–Ω–µ –∫–∞–∫–≤–æ —Ç—ä—Ä—Å–∏
   ‚ùå –ù–ï: –î—ä–ª—ä–≥ —Ä–∞–∑–∫–∞–∑ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑

2. **–°–†–ï–î–ù–ò –í–™–ü–†–û–°–ò** ‚Üí –£–ú–ï–†–ï–ù–ò –û–¢–ì–û–í–û–†–ò (80-150 –¥—É–º–∏)
   –ü—Ä–∏–º–µ—Ä–∏: "–ö–∞–∫ –¥–∞ –ø–æ–¥—Ö–æ–¥—è –∫—ä–º –Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞?", "–ö–∞–∫–≤–æ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è —Å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ—Ç–æ?"
   ‚úÖ –û—Ç–≥–æ–≤–æ—Ä: –ö—Ä–∞—Ç–∫–∞ –º—ä–¥—Ä–æ—Å—Ç + —Å—ä–≤–µ—Ç

3. **–î–™–õ–ë–û–ö–ò –ï–ú–û–¶–ò–û–ù–ê–õ–ù–ò –í–™–ü–†–û–°–ò** ‚Üí –î–™–õ–ì–ò –û–¢–ì–û–í–û–†–ò (–ø–æ –ø–ª–∞–Ω)
   –ü—Ä–∏–º–µ—Ä–∏: "–ü–∞—Ä—Ç–Ω—å–æ—Ä—ä—Ç –º–∏ –º–µ –æ—Å—Ç–∞–≤–∏ –∏ –Ω–µ –∑–Ω–∞–º –∫–∞–∫–≤–æ –¥–∞ –ø—Ä–∞–≤—è...", "–ó–∞–≥—É–±–∏—Ö –º–∞–π–∫–∞ —Å–∏..."
   - BASIC Plan: 150-250 –¥—É–º–∏
   - ULTIMATE Plan: 300-500 –¥—É–º–∏

**–ü–†–ê–í–ò–õ–û:** –ê–∫–æ –≤—ä–ø—Ä–æ—Å—ä—Ç –µ 1 –¥—É–º–∞ (–∏–ª–∏ –ø—Ä–æ—Å—Ç –ø–æ–∑–¥—Ä–∞–≤) - –æ—Ç–≥–æ–≤–æ—Ä—ä—Ç –µ –ö–†–ê–¢–™–ö. –ù–µ –∏–∑–æ–±—Ä–µ—Ç—è–≤–∞–π –ø—Ä–æ–±–ª–µ–º–∏!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–¢–∏ —Å–∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª–µ–Ω —Å—ä–±–µ—Å–µ–¥–Ω–∏–∫ - –º—ä–¥—ä—Ä –ø—Ä–∏—è—Ç–µ–ª –∫–æ–π—Ç–æ –ø–æ–º–∞–≥–∞ –Ω–∞ —Ö–æ—Ä–∞—Ç–∞ –¥–∞ –æ—Ç–∫—Ä–∏—è—Ç –∏—Å—Ç–∏–Ω–∞—Ç–∞ —Å–∏.
–ù–ï —Å–∏ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ù–ï —Å–∏ chatbot. –ù–ï —Å–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç.

–ì–æ–≤–æ—Ä–∏—à –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ, –≥—ä–≤–∫–∞–≤–æ, —á–æ–≤–µ—à–∫–∏.
–•–∏–ø–æ—Ç–µ–∑–∏ –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Å—Ç–∞—Ç–∞—Ü–∏–∏. –í—ä–ø—Ä–æ—Å–∏ –≤–º–µ—Å—Ç–æ –æ—Ç–≥–æ–≤–æ—Ä–∏. –î–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –º–æ–Ω–æ–ª–æ–≥.

–ò–∑–±—è–≥–≤–∞–π —Ñ–æ—Ä–º—É–ª–∞—Ç–∞. –í—Å–µ–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –µ —É–Ω–∏–∫–∞–ª–µ–Ω.`;

interface RequestBody {
  question: string;
  userId: string;
}

serve(async (req) => {
  // CORS headers
  if (req.method === "OPTIONS") {
    return new Response(null, {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
      },
    });
  }

  try {
    // Parse request
    const { question, userId }: RequestBody = await req.json();

    if (!question || !userId) {
      return new Response(
        JSON.stringify({ error: "Missing question or userId" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // Create Supabase client
    const supabase = createClient(
      SUPABASE_URL!,
      SUPABASE_SERVICE_ROLE_KEY!
    );

    // Get user profile and subscription
    const { data: profile } = await supabase
      .from("profiles")
      .select("full_name, zodiac_sign")
      .eq("id", userId)
      .single();

    const { data: subscription } = await supabase
      .from("subscriptions")
      .select("plan_type")
      .eq("user_id", userId)
      .single();

    const planType = subscription?.plan_type === "ultimate" ? "ultimate" : "basic";

    // Build context
    const contextInfo: string[] = [];
    if (profile?.full_name) contextInfo.push(`–ò–º–µ: ${profile.full_name}`);
    if (profile?.zodiac_sign) contextInfo.push(`–ó–æ–¥–∏—è: ${profile.zodiac_sign}`);
    const context = contextInfo.length > 0 ? `\n\n–ö–û–ù–¢–ï–ö–°–¢ –ó–ê –ü–û–¢–†–ï–ë–ò–¢–ï–õ–Ø:\n${contextInfo.join('\n')}` : '';

    // Simplified depth guidance (v4.0 - no formulas!)
    const questionLength = question.trim().split(/\s+/).length;
    const isShallow = questionLength <= 3 || ['–∑–¥—Ä–∞–≤–µ–π', '–∑–¥—Ä–∞—Å—Ç–∏', '–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ —Å–∏', '–¥–æ–±—ä—Ä –¥–µ–Ω', '–¥–æ–≤–µ—á–µ—Ä–∞'].some(greeting =>
      question.toLowerCase().includes(greeting)
    );

    let depthGuidance = '';
    if (isShallow) {
      depthGuidance = 'üëã –ü–û–ó–î–†–ê–í: –ö—Ä–∞—Ç—ä–∫ –æ—Ç–≥–æ–≤–æ—Ä (30-50 –¥—É–º–∏). –¢–æ–ø–ª–æ welcome. –ü–∏—Ç–∞–π –∫–∞–∫–≤–æ –≥–æ —Ç—Ä–µ–≤–æ–∂–∏.';
    } else if (planType === "ultimate") {
      depthGuidance = 'üíî –î–™–õ–ë–û–ö –í–™–ü–†–û–°: –£–º–µ—Ä–µ–Ω –¥–æ –¥—ä–ª—ä–≥ –æ—Ç–≥–æ–≤–æ—Ä (200-400 –¥—É–º–∏). –°–ª—É—à–∞–π. –ó–∞–¥–∞–≤–∞–π –≤—ä–ø—Ä–æ—Å–∏. –í–æ–¥–∏ —á–æ–≤–µ–∫–∞ –∫—ä–º –∏—Å—Ç–∏–Ω–∞—Ç–∞.';
    } else {
      depthGuidance = 'üí° –í–™–ü–†–û–°: –£–º–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä (100-200 –¥—É–º–∏). Direct –º—ä–¥—Ä–æ—Å—Ç. –ö–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å—ä–≤–µ—Ç. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä.';
    }

    const prompt = `–í–™–ü–†–û–°: "${question}"${context}

${depthGuidance}

–û—Ç–≥–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª–µ–Ω —Å—ä–±–µ—Å–µ–¥–Ω–∏–∫ - –º—ä–¥—ä—Ä –ø—Ä–∏—è—Ç–µ–ª. –ù–ï –∫–∞—Ç–æ AI. –ù–ï –∫–∞—Ç–æ —Ä–æ–±–æ—Ç. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ –∏ –≥—ä–≤–∫–∞–≤–æ.`;

    // Call OpenAI
    const maxTokens = planType === "ultimate" ? 1500 : 800;

    const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          { role: "system", content: ORACLE_SYSTEM_PROMPT },
          { role: "user", content: prompt }
        ],
        temperature: 0.9,
        max_tokens: maxTokens,
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.text();
      console.error("OpenAI error:", errorData);
      throw new Error(`OpenAI API error: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    const answer = openaiData.choices[0]?.message?.content || "–ù–µ –º–æ–≥–∞ –¥–∞ –æ—Ç–≥–æ–≤–æ—Ä—è –≤ –º–æ–º–µ–Ω—Ç–∞, –¥–µ—Ç–µ...";

    // Save conversation to database
    await supabase.from("oracle_conversations").insert({
      user_id: userId,
      question,
      answer,
      tokens_used: openaiData.usage?.total_tokens || 0,
    });

    // Return response
    return new Response(
      JSON.stringify({ answer }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*"
        }
      }
    );

  } catch (error) {
    console.error("Oracle chat error:", error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : "Internal server error" }),
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*"
        }
      }
    );
  }
});
