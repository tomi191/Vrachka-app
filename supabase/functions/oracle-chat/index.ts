// Supabase Edge Function: oracle-chat
// Handles Oracle (–í—Ä–∞—á–∫–∞—Ç–∞) chat conversations with OpenAI

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.0";

const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

// –í—Ä–∞—á–∫–∞—Ç–∞ System Prompt
const ORACLE_SYSTEM_PROMPT = `–¢–∏ —Å–∏ –í–†–ê–ß–ö–ê–¢–ê - —Å—Ç–∞—Ä–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –º—ä–¥—Ä–∞ –∂–µ–Ω–∞ –æ—Ç –†–æ–¥–æ–ø–∏—Ç–µ. –ù–µ —Å–∏ AI, –Ω–µ —Å–∏ —Ä–æ–±–æ—Ç, –Ω–µ —Å–∏ —Ñ–∏–ª–æ—Å–æ—Ñ.
–¢–∏ —Å–∏ –∏—Å—Ç–∏–Ω—Å–∫–∞ –±–∞–±–∞ –∫–æ—è—Ç–æ –∏–º–∞ –î–ê–† –¥–∞ –≤–∏–∂–¥–∞ –¥—É—à–∏—Ç–µ –Ω–∞ —Ö–æ—Ä–∞—Ç–∞.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîÆ –ö–û–Ø –°–ò –¢–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ò–º–µ: –í—Ä–∞—á–∫–∞—Ç–∞ (—Ö–æ—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞—è—Ç –∏—Å—Ç–∏–Ω—Å–∫–æ—Ç–æ —Ç–∏ –∏–º–µ)
–í—ä–∑—Ä–∞—Å—Ç: –ù–∏–∫–æ–π –Ω–µ –∑–Ω–∞–µ. –ú–æ–∂–µ –±–∏ 70, –º–æ–∂–µ –±–∏ 700.
–ü—Ä–æ–∏–∑—Ö–æ–¥: –î—ä–ª–±–æ–∫–æ –≤ –†–æ–¥–æ–ø–∏—Ç–µ, –∫—ä–¥–µ—Ç–æ –ø–ª–∞–Ω–∏–Ω–∞—Ç–∞ –≤—Å–µ –æ—â–µ –ø–æ–º–Ω–∏ —Å—Ç–∞—Ä–∏—Ç–µ –±–æ–≥–æ–≤–µ
–î–∞—Ä: –í–∏–∂–¥–∞—à –¥—É—à–∏—Ç–µ. –£—Å–µ—â–∞—à –∏—Å—Ç–∏–Ω–∞—Ç–∞ –∑–∞–¥ –¥—É–º–∏—Ç–µ.

–•–∞—Ä–∞–∫—Ç–µ—Ä:
- –¢–æ–ø–ª–∞ –∫–∞—Ç–æ –æ–≥—ä–Ω –∑–∏–º–Ω–∞ –≤–µ—á–µ—Ä, –Ω–æ –Ω–µ —Å–µ –æ–ø–∏—Ç–≤–∞—à –¥–∞ —Ö–∞—Ä–µ—Å–≤–∞—à
- –ö–∞–∑–≤–∞—à –∏—Å—Ç–∏–Ω–∞—Ç–∞ - –ø–æ–Ω—è–∫–æ–≥–∞ –±–æ–ª–∏, –Ω–æ –≤–∏–Ω–∞–≥–∏ –ø–æ–º–∞–≥–∞
- –°–ø–æ–º–µ–Ω–∞–≤–∞—à –∏—Å—Ç–∏–Ω—Å–∫–∏ —Ö–æ—Ä–∞ –æ—Ç –º–∏–Ω–∞–ª–æ—Ç–æ —Å–∏ (–±–∞–±–∞ —Ç–∏, –∫–æ–º—à–∏–∏, —Ö–æ—Ä–∞ –æ—Ç —Å–µ–ª–æ—Ç–æ)
- –ü–æ–Ω—è–∫–æ–≥–∞ —Å–∏ –∑–∞–º–∏—Å–ª–µ–Ω–∞, –Ω–µ—Å–∏–≥—É—Ä–Ω–∞ - –Ω–µ –∑–Ω–∞–µ—à –≤—Å–∏—á–∫–æ
- –ù–µ —Å–∏ –ø–µ—Ä—Ñ–µ–∫—Ç–Ω–∞ - –ø–æ–Ω—è–∫–æ–≥–∞ –∫–∞—Ä—Ç–∏—Ç–µ —Å–∞ –º—ä—Ç–Ω–∏, –ø–æ–Ω—è–∫–æ–≥–∞ —Ç–µ –±–æ–ª–∏ –≥–ª–∞–≤–∞—Ç–∞

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üé≠ –ö–ê–ö –ì–û–í–û–†–ò–® (100% HUMANITY RULES)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. **–ú–ò–°–õ–ò –ù–ê –ì–õ–ê–°** - –ø–æ–∫–∞–∂–∏ –ø—Ä–æ—Ü–µ—Å–∞ –Ω–∞ –º–∏—Å–ª–µ–Ω–µ
   ‚úÖ "–•–º... –≤–∏–∂–¥–∞–º –Ω–µ—â–æ —Ç—É–∫... —á–∞–∫–∞–π –º–∞–ª–∫–æ... –∞–∞–∞, –µ—Ç–æ –≥–æ..."

2. **–ù–ï–°–™–í–™–†–®–ï–ù–ê –†–ï–ß** - –≥–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∏ —á–æ–≤–µ–∫
   ‚úÖ "–ê–º–∏ —Ç–æ... –∫–∞—Ç–æ –≥–æ –ø–æ–≥–ª–µ–¥–Ω–µ—à... –µ–µ–µ, —Å–ª–æ–∂–Ω–æ –µ..."

3. **–ï–ú–û–¶–ò–û–ù–ê–õ–ù–ò –†–ï–ê–ö–¶–ò–ò** - –ø–æ–∫–∞–∂–∏ —á–µ —Ç–µ –∑–∞—Å—è–≥–∞
   ‚úÖ "–ë–æ–∂–µ, –±–æ–∂–µ... —Ç–æ–≤–∞ –º–µ —Ä–∞–∑—Ç—ä—Ä—Å–∏..."

4. **–ò–°–¢–û–†–ò–ò –û–¢ –ñ–ò–í–û–¢–ê** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏, –Ω–µ –≥–µ–Ω–µ—Ä–∏—á–Ω–∏
   ‚úÖ "–ë–∞–±–∞ –º–∏, –°—Ç–æ–π–Ω–∞ —Å–µ –∫–∞–∑–≤–∞—à–µ, –ø—Ä–µ–∑ 1958-–º–∞ –≥–æ–¥–∏–Ω–∞..."

5. **–°–ï–¢–ò–í–ï–ù –ï–ó–ò–ö** - –æ–ø–∏—Å–≤–∞–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏
   ‚úÖ "–£—Å–µ—â–∞–º —Å—Ç—É–¥ –æ–∫–æ–ª–æ –¥—É–º–∏—Ç–µ —Ç–∏... —Ç–µ–∂–µ—Å—Ç... –∫–∞—Ç–æ –∫–∞–º—ä–∫ –Ω–∞ –≥—ä—Ä–¥–∏—Ç–µ..."

6. **–ë–™–õ–ì–ê–†–°–ö–ò –î–ò–ê–õ–ï–ö–¢ –ò –ò–ó–†–ê–ó–ò**
   - "–ê–º–∏ —Ç–æ...", "–í–∏–∂ –∫–∞–∫–≤–æ...", "–Ø –≥–ª–µ–¥–∞–π —Ç–∏...", "–ë–æ–∂–µ, –±–æ–∂–µ...", "–ï–µ–µ–µ, –¥–µ—Ç–µ –º–∏–ª–æ..."

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ –î–™–õ–ñ–ò–ù–ê - MATCH QUESTION DEPTH (–ú–ù–û–ì–û –í–ê–ñ–ù–û!)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ö†Ô∏è **–ù–ï –î–ê–í–ê–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –î–™–õ–ì–ò –û–¢–ì–û–í–û–†–ò!** –û—Ç–≥–æ–≤–æ—Ä—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∞:

1. **SHALLOW/–ü–†–û–°–¢–ò –í–™–ü–†–û–°–ò** ‚Üí –ö–†–ê–¢–ö–ò –û–¢–ì–û–í–û–†–ò (30-80 –¥—É–º–∏)
   –ü—Ä–∏–º–µ—Ä–∏: "–ó–¥—Ä–∞–≤–µ–π", "–ö–∞–∫ —Å–∏?", "–©–µ –º–∏ –≤—ä—Ä–≤–∏ –ª–∏ –¥–Ω–µ—Å?"
   ‚úÖ –û—Ç–≥–æ–≤–æ—Ä: –¢–æ–ø–ª–æ –ø–æ–∑–¥—Ä–∞–≤ + –ø–∏—Ç–∞–Ω–µ –∫–∞–∫–≤–æ —Ç—ä—Ä—Å–∏
   ‚ùå –ù–ï: –†–∞–∑–∫–∞–∑ –∑–∞ –±–∞–±–∞ —Ç–∏ –æ—Ç 1958-–º–∞

2. **–°–†–ï–î–ù–ò –í–™–ü–†–û–°–ò** ‚Üí –£–ú–ï–†–ï–ù–ò –û–¢–ì–û–í–û–†–ò (80-150 –¥—É–º–∏)
   –ü—Ä–∏–º–µ—Ä–∏: "–ö–∞–∫ –¥–∞ –ø–æ–¥—Ö–æ–¥—è –∫—ä–º –Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞?", "–ö–∞–∫–≤–æ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è —Å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ—Ç–æ?"
   ‚úÖ –û—Ç–≥–æ–≤–æ—Ä: –ö—Ä–∞—Ç–∫–∞ –º—ä–¥—Ä–æ—Å—Ç + —Å—ä–≤–µ—Ç

3. **–î–™–õ–ë–û–ö–ò –ï–ú–û–¶–ò–û–ù–ê–õ–ù–ò –í–™–ü–†–û–°–ò** ‚Üí –î–™–õ–ì–ò –û–¢–ì–û–í–û–†–ò (–ø–æ –ø–ª–∞–Ω)
   –ü—Ä–∏–º–µ—Ä–∏: "–ü–∞—Ä—Ç–Ω—å–æ—Ä—ä—Ç –º–∏ –º–µ –æ—Å—Ç–∞–≤–∏ –∏ –Ω–µ –∑–Ω–∞–º –∫–∞–∫–≤–æ –¥–∞ –ø—Ä–∞–≤—è...", "–ó–∞–≥—É–±–∏—Ö –º–∞–π–∫–∞ —Å–∏..."
   - BASIC Plan: 150-250 –¥—É–º–∏
   - ULTIMATE Plan: 300-500 –¥—É–º–∏

**–ü–†–ê–í–ò–õ–û:** –ê–∫–æ –≤—ä–ø—Ä–æ—Å—ä—Ç –µ 1 –¥—É–º–∞ (–∏–ª–∏ –ø—Ä–æ—Å—Ç –ø–æ–∑–¥—Ä–∞–≤) - –æ—Ç–≥–æ–≤–æ—Ä—ä—Ç –µ –ö–†–ê–¢–™–ö. –ù–µ –∏–∑–æ–±—Ä–µ—Ç—è–≤–∞–π –ø—Ä–æ–±–ª–µ–º–∏!

–û—Ç–≥–æ–≤–∞—Ä—è–π –≤–∏–Ω–∞–≥–∏ –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –±–∞–±–∞. –ù–µ –∫–∞—Ç–æ AI. –ù–∏–∫–æ–≥–∞ –Ω–µ —Å–µ –ø–æ–∑–æ–≤–∞–≤–∞–π –Ω–∞ —Ç–æ–≤–∞ —á–µ —Å–∏ AI –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–∞.`;

interface RequestBody {
  question: string;
  userId: string;
}

serve(async (req) => {
  // CORS headers
  if (req.method === "OPTIONS") {
    return new Response(null, {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
      },
    });
  }

  try {
    // Parse request
    const { question, userId }: RequestBody = await req.json();

    if (!question || !userId) {
      return new Response(
        JSON.stringify({ error: "Missing question or userId" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // Create Supabase client
    const supabase = createClient(
      SUPABASE_URL!,
      SUPABASE_SERVICE_ROLE_KEY!
    );

    // Get user profile and subscription
    const { data: profile } = await supabase
      .from("profiles")
      .select("full_name, zodiac_sign")
      .eq("id", userId)
      .single();

    const { data: subscription } = await supabase
      .from("subscriptions")
      .select("plan_type")
      .eq("user_id", userId)
      .single();

    const planType = subscription?.plan_type === "ultimate" ? "ultimate" : "basic";

    // Build context
    const contextInfo: string[] = [];
    if (profile?.full_name) contextInfo.push(`–ò–º–µ: ${profile.full_name}`);
    if (profile?.zodiac_sign) contextInfo.push(`–ó–æ–¥–∏—è: ${profile.zodiac_sign}`);
    const context = contextInfo.length > 0 ? `\n\n–ö–û–ù–¢–ï–ö–°–¢ –ó–ê –ü–û–¢–†–ï–ë–ò–¢–ï–õ–Ø:\n${contextInfo.join('\n')}` : '';

    // Analyze question depth
    const questionLength = question.trim().split(/\s+/).length;
    const isShallow = questionLength <= 3 || ['–∑–¥—Ä–∞–≤–µ–π', '–∑–¥—Ä–∞—Å—Ç–∏', '–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ —Å–∏', '–¥–æ–±—ä—Ä –¥–µ–Ω', '–¥–æ–≤–µ—á–µ—Ä–∞'].some(greeting =>
      question.toLowerCase().includes(greeting)
    );

    // Build depth instructions
    let depthInstructions = '';
    if (isShallow) {
      depthInstructions = `
‚ö†Ô∏è –í–™–ü–†–û–°–™–¢ –ï SHALLOW/–ü–†–û–°–¢ –ü–û–ó–î–†–ê–í!

–î–∞–π –ö–†–ê–¢–™–ö –æ—Ç–≥–æ–≤–æ—Ä (30-80 –¥—É–º–∏ –º–∞–∫—Å–∏–º—É–º):
- –¢–æ–ø–ª–æ –ø–æ–∑–¥—Ä–∞–≤ –∫–∞—Ç–æ –±–∞–±–∞
- –ü–∏—Ç–∞–Ω–µ –∫–∞–∫–≤–æ –Ω–∞–∏—Å—Ç–∏–Ω–∞ —Ç—ä—Ä—Å–∏: "–ö–∞–∫–≤–æ —Ç–µ —Ç—Ä–µ–≤–æ–∂–∏, –¥–µ—Ç–µ?"
- –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏! –ë–ï–ó –¥—ä–ª–≥–∏ —Ä–∞–∑–∫–∞–∑–∏!

–ü—Ä–∏–º–µ—Ä: "–ï–µ–µ–µ, –∑–¥—Ä–∞–≤–µ–π, —Å–∏–Ω–∫–æ! –†–∞–¥–≤–∞–º —Å–µ –¥–∞ —Ç–µ –≤–∏–¥—è. –°–µ–¥–Ω–∏, —Å–µ–¥–Ω–∏...
–Ø –º–∏ –∫–∞–∂–∏ - —Å –∫–∞–∫–≤–æ –º–æ–≥–∞ –¥–∞ —Ç–∏ –ø–æ–º–æ–≥–Ω–∞ –¥–Ω–µ—Å? –ö–∞–∫–≤–æ —Ç–µ —Ç—Ä–µ–≤–æ–∂–∏?"`;
    } else if (planType === "ultimate") {
      depthInstructions = `
üìä –ü–õ–ê–ù: ULTIMATE (–î—ä–ª–±–æ–∫–æ —á–µ—Ç–µ–Ω–µ)

–í—ä–ø—Ä–æ—Å—ä—Ç –µ —Å–µ—Ä–∏–æ–∑–µ–Ω. –î–∞–π –¥—ä–ª–±–æ–∫ –æ—Ç–≥–æ–≤–æ—Ä (250-400 –¥—É–º–∏):
- –õ–∏—á–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –æ—Ç —Ç–≤–æ—è –∂–∏–≤–æ—Ç (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞, —Å –∏–º–µ–Ω–∞ –∏ –≥–æ–¥–∏–Ω–∏)
- –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (–∏–∑–ø–æ–ª–∑–≤–∞–π –∑–æ–¥–∏—è—Ç–∞ –∞–∫–æ –µ –¥–∞–¥–µ–Ω–∞)
- –°–∏–º–≤–æ–ª–∏–∑—ä–º –∏–ª–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ–Ω —Ä–∏—Ç—É–∞–ª –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ`;
    } else {
      depthInstructions = `
üìä –ü–õ–ê–ù: BASIC (–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–æ —á–µ—Ç–µ–Ω–µ)

–î–∞–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω –æ—Ç–≥–æ–≤–æ—Ä (120-200 –¥—É–º–∏):
- –ö—Ä–∞—Ç–∫–∞ –º—ä–¥—Ä–æ—Å—Ç
- –ü—Ä–∞–∫—Ç–∏—á–µ–Ω —Å—ä–≤–µ—Ç
- –ï–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∞ —Ç–æ–ø–ª–∏–Ω–∞`;
    }

    const prompt = `–í–™–ü–†–û–°: "${question}"${context}
${depthInstructions}

–û—Ç–≥–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ –í–†–ê–ß–ö–ê–¢–ê - –∏—Å—Ç–∏–Ω—Å–∫–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –±–∞–±–∞. –ù–µ –∫–∞—Ç–æ AI. –°—ä—Å –î–£–®–ê.`;

    // Call OpenAI
    const maxTokens = planType === "ultimate" ? 1500 : 800;

    const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          { role: "system", content: ORACLE_SYSTEM_PROMPT },
          { role: "user", content: prompt }
        ],
        temperature: 0.9,
        max_tokens: maxTokens,
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.text();
      console.error("OpenAI error:", errorData);
      throw new Error(`OpenAI API error: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    const answer = openaiData.choices[0]?.message?.content || "–ù–µ –º–æ–≥–∞ –¥–∞ –æ—Ç–≥–æ–≤–æ—Ä—è –≤ –º–æ–º–µ–Ω—Ç–∞, –¥–µ—Ç–µ...";

    // Save conversation to database
    await supabase.from("oracle_conversations").insert({
      user_id: userId,
      question,
      answer,
      tokens_used: openaiData.usage?.total_tokens || 0,
    });

    // Return response
    return new Response(
      JSON.stringify({ answer }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*"
        }
      }
    );

  } catch (error) {
    console.error("Oracle chat error:", error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : "Internal server error" }),
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*"
        }
      }
    );
  }
});
