/**
 * Intelligent Question Classifier for Oracle (–í—Ä–∞—á–∫–∞—Ç–∞)
 * Classifies questions to determine appropriate response depth and style
 */

export type QuestionType = 'yes-no' | 'greeting' | 'advice' | 'deep-emotional' | 'gambling' | 'numbers-request' | 'off-topic';
export type ResponseDepth = 'shallow' | 'medium' | 'deep';

export interface QuestionAnalysis {
  type: QuestionType;
  depth: ResponseDepth;
  wordCount: number;
  hasGamblingKeywords: boolean;
  hasEmotionalKeywords: boolean;
  suggestedWordCount: number;
}

// Keywords for different question types
const GREETING_KEYWORDS = [
  '–∑–¥—Ä–∞–≤–µ–π', '–∑–¥—Ä–∞—Å—Ç–∏', '–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ —Å–∏', '–¥–æ–±—ä—Ä –¥–µ–Ω',
  '–¥–æ–±—Ä–æ —É—Ç—Ä–æ', '–¥–æ–±—ä—Ä –≤–µ—á–µ—Ä', '–¥–æ–≤–µ—á–µ—Ä–∞', '—Ö–µ–π', '–∞–ª–æ'
];

const YES_NO_PATTERNS = [
  /^—â–µ\s+/i,              // "—â–µ —Å–ø–µ—á–µ–ª—è"
  /^–º–æ–∂–µ\s+–ª–∏/i,          // "–º–æ–∂–µ –ª–∏ –¥–∞"
  /^—Ç—Ä—è–±–≤–∞\s+–ª–∏/i,        // "—Ç—Ä—è–±–≤–∞ –ª–∏ –¥–∞"
  /^–∏–º–∞\s+–ª–∏/i,           // "–∏–º–∞ –ª–∏ —à–∞–Ω—Å"
  /^–æ–±–∏—á–∞\s+–ª–∏/i,         // "–æ–±–∏—á–∞ –ª–∏ –º–µ"
  /^—â–µ\s+—Å–µ/i,            // "—â–µ —Å–µ —Å–ª—É—á–∏ –ª–∏"
  /^—â–µ\s+–º–∏/i,            // "—â–µ –º–∏ –≤—ä—Ä–≤–∏ –ª–∏"
  /\s+–ª–∏(\s|$|\?)/i,      // ending with "–ª–∏"
];

const GAMBLING_KEYWORDS = [
  '—Ç–æ—Ç–æ', '–ª–æ—Ç–∞—Ä–∏—è', '–∑–∞–ª–æ–≥', '—Ö–∞–∑–∞—Ä—Ç', '–±–∞—Å', '–ø–µ—á–∞–ª–±–∞',
  '—Å–ø–æ—Ä—Ç–æ—Ç–æ', '–∫–∞–∑–∏–Ω–æ', '–∏–≥—Ä–∞', '–Ω–æ–º–µ—Ä', '–∫–æ–º–±–∏–Ω–∞—Ü–∏—è'
];

const EMOTIONAL_KEYWORDS = [
  '–Ω–µ –∑–Ω–∞–º –∫–∞–∫–≤–æ –¥–∞ –ø—Ä–∞–≤—è', '–ø–∞—Ä—Ç–Ω—å–æ—Ä', '—Ä–∞–∑–¥—è–ª–∞', '–∑–∞–≥—É–±–∏—Ö',
  '—É–º—Ä—è', '–±–æ–ª–∏', '—Å—Ç—Ä–∞—Ö', '—Ç—ä–∂–µ–Ω', '—Å–∞–º–æ—Ç–µ–Ω', '–¥–µ–ø—Ä–µ—Å–∏—è',
  '–æ—Å—Ç–∞–≤–∏ –º–µ', '–Ω–∞–ø—É—Å–Ω–∞', '–∏–∑–Ω–µ–≤—è—Ä–∞', '–º–∞–π–∫–∞', '–±–∞—â–∞', '—Å–µ–º–µ–π—Å—Ç–≤–æ'
];

const ADVICE_KEYWORDS = [
  '–∫–∞–∫ –¥–∞', '–∫–∞–∫–≤–æ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è', '–∫–∞–∫–≤–æ –¥–∞ –ø—Ä–∞–≤—è', '–∫–∞–∫ –º–æ–≥–∞',
  '–¥–∞–π –º–∏ —Å—ä–≤–µ—Ç', '–ø–æ–º–æ–≥–Ω–∏', '—Ç—Ä—è–±–≤–∞ –ª–∏ –¥–∞ –ø—Ä–∏–µ–º–∞', '–¥–∞ –ø—Ä–∏–µ–º–∞ –ª–∏'
];

const NUMBERS_REQUEST_KEYWORDS = [
  '—á–∏—Å–ª–∞ –∑–∞', '–Ω–æ–º–µ—Ä –∑–∞', '–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∑–∞', '–¥–∞–π –º–∏ —á–∏—Å–ª–∞',
  '–∫–æ–∏ —á–∏—Å–ª–∞', '–∫–∞–∫–≤–∏ —á–∏—Å–ª–∞', '—á–∏—Å–ª–∞—Ç–∞ –∑–∞ —Ç–æ—Ç–æ', '—á–∏—Å–ª–∞—Ç–∞ –∑–∞ –ª–æ—Ç–∞—Ä–∏—è',
  '–∫—ä—Å–º–µ—Ç–ª–∏–π—Å–∫–∏ —á–∏—Å–ª–∞'
];

const OFF_TOPIC_KEYWORDS = [
  '–ø—Ä–æ–º–ø—Ç', 'prompt', '—Å–∫—Ä–∏–ø—Ç', 'script', '–∫–æ–¥', 'code',
  '–≥–µ–Ω–µ—Ä–∏—Ä–∞–π', 'generate', '—Å–Ω–∏–º–∫–∞', 'image', '–≤–∏–¥–µ–æ', 'video',
  '—Ä–µ—Ü–µ–ø—Ç–∞', '–≥–æ—Ç–≤–µ–Ω–µ', '–±–∏–∑–Ω–µ—Å –ø–ª–∞–Ω', '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏', '–∞–¥–≤–æ–∫–∞—Ç',
  '–ª–µ–∫–∞—Ä', '–¥–∏–∞–≥–Ω–æ–∑–∞', '—Å–∏–º–ø—Ç–æ–º', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ',
  '–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–Ω–µ', 'html', 'css', 'javascript', 'python', 'react'
];

/**
 * Classifies a question to determine appropriate Oracle response
 */
export function classifyQuestion(question: string): QuestionAnalysis {
  const normalized = question.toLowerCase().trim();
  const wordCount = normalized.split(/\s+/).length;

  // Check for gambling keywords
  const hasGamblingKeywords = GAMBLING_KEYWORDS.some(kw => normalized.includes(kw));

  // Check for emotional keywords
  const hasEmotionalKeywords = EMOTIONAL_KEYWORDS.some(kw => normalized.includes(kw));

  // Check for numbers request
  const hasNumbersRequest = NUMBERS_REQUEST_KEYWORDS.some(kw => normalized.includes(kw));

  // Check for off-topic
  const isOffTopic = OFF_TOPIC_KEYWORDS.some(kw => normalized.includes(kw));

  // 0. OFF-TOPIC - Redirect immediately
  if (isOffTopic) {
    return {
      type: 'off-topic',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords: false,
      hasEmotionalKeywords: false,
      suggestedWordCount: 30,
    };
  }

  // 1. NUMBERS REQUEST - Give numbers with disclaimer
  if (hasNumbersRequest || (hasGamblingKeywords && (normalized.includes('—á–∏—Å–ª–∞') || normalized.includes('–Ω–æ–º–µ—Ä')))) {
    return {
      type: 'numbers-request',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords: true,
      hasEmotionalKeywords: false,
      suggestedWordCount: 100, // 80-120 words (numbers + explanation + question)
    };
  }

  // 2. GAMBLING QUESTIONS (without numbers request) - Short, directive
  if (hasGamblingKeywords) {
    return {
      type: 'gambling',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords: true,
      hasEmotionalKeywords: false,
      suggestedWordCount: 70, // 50-80 words
    };
  }

  // 3. GREETINGS - Very short
  if (GREETING_KEYWORDS.some(greeting => normalized.includes(greeting)) && wordCount <= 5) {
    return {
      type: 'greeting',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords: false,
      hasEmotionalKeywords: false,
      suggestedWordCount: 40, // 30-50 words
    };
  }

  // 4. YES/NO QUESTIONS - Short, direct
  if (YES_NO_PATTERNS.some(pattern => pattern.test(normalized)) && wordCount <= 10) {
    return {
      type: 'yes-no',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords,
      hasEmotionalKeywords,
      suggestedWordCount: 60, // 40-80 words
    };
  }

  // 5. DEEP EMOTIONAL QUESTIONS - Long, empathetic
  if (hasEmotionalKeywords || wordCount > 15) {
    return {
      type: 'deep-emotional',
      depth: 'deep',
      wordCount,
      hasGamblingKeywords: false,
      hasEmotionalKeywords: true,
      suggestedWordCount: 300, // 200-400 words (varies by plan)
    };
  }

  // 6. ADVICE QUESTIONS - Medium length, practical
  if (ADVICE_KEYWORDS.some(kw => normalized.includes(kw)) || wordCount > 5) {
    return {
      type: 'advice',
      depth: 'medium',
      wordCount,
      hasGamblingKeywords,
      hasEmotionalKeywords,
      suggestedWordCount: 120, // 100-150 words
    };
  }

  // DEFAULT: Medium depth
  return {
    type: 'advice',
    depth: 'medium',
    wordCount,
    hasGamblingKeywords,
    hasEmotionalKeywords,
    suggestedWordCount: 100,
  };
}

/**
 * Gets depth instructions based on question analysis and plan type
 * Version 4.0 - Simplified, flexible guidelines (no formulas!)
 */
export function getDepthInstructions(
  analysis: QuestionAnalysis,
  planType: 'basic' | 'ultimate'
): string {
  // OFF-TOPIC - Quick redirect
  if (analysis.type === 'off-topic') {
    return `
‚õî OFF-TOPIC: –ö—Ä–∞—Ç—ä–∫ redirect (30-50 –¥—É–º–∏)
–ö–∞–∂–∏ direct —á–µ —Ç–æ–≤–∞ –Ω–µ –µ —Ç–≤–æ—è—Ç–∞ –æ–±–ª–∞—Å—Ç. –ü–∏—Ç–∞–π –∑–∞ –¥—É—Ö–æ–≤–Ω–∏ —Ç–µ–º–∏.`;
  }

  // NUMBERS REQUEST - Give numbers + disclaimer + question
  if (analysis.type === 'numbers-request') {
    return `
üé∞ –ß–ò–°–õ–ê: –î–∞–π 5-6 —á–∏—Å–ª–∞ + disclaimer + –¥—ä–ª–±–æ–∫ –≤—ä–ø—Ä–æ—Å (80-120 –¥—É–º–∏)
–ü—Ä–∏–º–µ—Ä: "–í–∏–∂–¥–∞–º: 3, 17, 24... –ö—ä—Å–º–µ—Ç—ä—Ç –µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º, –≥–∞—Ä–∞–Ω—Ü–∏–∏ –Ω—è–º–∞. –ö–∞–∫–≤–æ –Ω–∞–∏—Å—Ç–∏–Ω–∞ –ª–∏–ø—Å–≤–∞ –≤ –∂–∏–≤–æ—Ç–∞ —Ç–∏?"`;
  }

  // GAMBLING - Short question
  if (analysis.type === 'gambling') {
    return `
‚ö†Ô∏è –•–ê–ó–ê–†–¢: –ö—Ä–∞—Ç—ä–∫ –æ—Ç–≥–æ–≤–æ—Ä (50-80 –¥—É–º–∏)
–ó–∞–¥–∞–π –≤—ä–ø—Ä–æ—Å –∑–∞ –∫–æ—Ä–µ–Ω–∞. –ó–∞—â–æ —Ç—ä—Ä—Å–∏ —Å–ø–∞—Å–µ–Ω–∏–µ —Ç–∞–º?`;
  }

  // GREETINGS - Very short
  if (analysis.type === 'greeting') {
    return `
üëã –ü–û–ó–î–†–ê–í: –ú–Ω–æ–≥–æ –∫—Ä–∞—Ç—ä–∫ (30-50 –¥—É–º–∏)
–¢–æ–ø–ª–æ welcome. –ü–∏—Ç–∞–π –∫–∞–∫–≤–æ –≥–æ —Ç—Ä–µ–≤–æ–∂–∏.`;
  }

  // YES/NO - Reveal what's behind the question
  if (analysis.type === 'yes-no') {
    return `
‚úÖ –î–ê/–ù–ï: –ö—Ä–∞—Ç—ä–∫, –Ω–æ —Ä–∞–∑–∫—Ä–∏–≤–∞—â (40-80 –¥—É–º–∏)
–ü–æ–∫–∞–∂–∏ –∫–∞–∫–≤–æ –∫—Ä–∏–µ –≤—ä–ø—Ä–æ—Å—ä—Ç. –ù–ï –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –¥–∞/–Ω–µ.`;
  }

  // DEEP EMOTIONAL - Long, empathetic
  if (analysis.type === 'deep-emotional') {
    const wordCount = planType === 'ultimate' ? '250-400' : '150-250';
    return `
üíî –ï–ú–û–¶–ò–û–ù–ê–õ–ï–ù: –î—ä–ª–±–æ–∫ –æ—Ç–≥–æ–≤–æ—Ä (${wordCount} –¥—É–º–∏)
–°–ª—É—à–∞–π. –ó–∞–¥–∞–≤–∞–π –≤—ä–ø—Ä–æ—Å–∏. –í–æ–¥–∏ —á–æ–≤–µ–∫–∞ –∫—ä–º –Ω–µ–≥–æ–≤–∞—Ç–∞ –∏—Å—Ç–∏–Ω–∞.`;
  }

  // ADVICE - Medium length
  const wordCount = planType === 'ultimate' ? '150-200' : '100-150';
  return `
üí° –°–™–í–ï–¢: –£–º–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä (${wordCount} –¥—É–º–∏)
Direct –º—ä–¥—Ä–æ—Å—Ç. –ö–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å—ä–≤–µ—Ç. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–µ–Ω –ø–æ–¥—Ö–æ–¥.`;
}
