/**
 * Intelligent Question Classifier for Oracle (–í—Ä–∞—á–∫–∞—Ç–∞)
 * Classifies questions to determine appropriate response depth and style
 */

export type QuestionType = 'yes-no' | 'greeting' | 'advice' | 'deep-emotional' | 'gambling';
export type ResponseDepth = 'shallow' | 'medium' | 'deep';

export interface QuestionAnalysis {
  type: QuestionType;
  depth: ResponseDepth;
  wordCount: number;
  hasGamblingKeywords: boolean;
  hasEmotionalKeywords: boolean;
  suggestedWordCount: number;
}

// Keywords for different question types
const GREETING_KEYWORDS = [
  '–∑–¥—Ä–∞–≤–µ–π', '–∑–¥—Ä–∞—Å—Ç–∏', '–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ —Å–∏', '–¥–æ–±—ä—Ä –¥–µ–Ω',
  '–¥–æ–±—Ä–æ —É—Ç—Ä–æ', '–¥–æ–±—ä—Ä –≤–µ—á–µ—Ä', '–¥–æ–≤–µ—á–µ—Ä–∞', '—Ö–µ–π', '–∞–ª–æ'
];

const YES_NO_PATTERNS = [
  /^—â–µ\s+/i,              // "—â–µ —Å–ø–µ—á–µ–ª—è"
  /^–º–æ–∂–µ\s+–ª–∏/i,          // "–º–æ–∂–µ –ª–∏ –¥–∞"
  /^—Ç—Ä—è–±–≤–∞\s+–ª–∏/i,        // "—Ç—Ä—è–±–≤–∞ –ª–∏ –¥–∞"
  /^–∏–º–∞\s+–ª–∏/i,           // "–∏–º–∞ –ª–∏ —à–∞–Ω—Å"
  /^–æ–±–∏—á–∞\s+–ª–∏/i,         // "–æ–±–∏—á–∞ –ª–∏ –º–µ"
  /^—â–µ\s+—Å–µ/i,            // "—â–µ —Å–µ —Å–ª—É—á–∏ –ª–∏"
  /^—â–µ\s+–º–∏/i,            // "—â–µ –º–∏ –≤—ä—Ä–≤–∏ –ª–∏"
  /\s+–ª–∏(\s|$|\?)/i,      // ending with "–ª–∏"
];

const GAMBLING_KEYWORDS = [
  '—Ç–æ—Ç–æ', '–ª–æ—Ç–∞—Ä–∏—è', '–∑–∞–ª–æ–≥', '—Ö–∞–∑–∞—Ä—Ç', '–±–∞—Å', '–ø–µ—á–∞–ª–±–∞',
  '—Å–ø–æ—Ä—Ç–æ—Ç–æ', '–∫–∞–∑–∏–Ω–æ', '–∏–≥—Ä–∞', '–Ω–æ–º–µ—Ä', '–∫–æ–º–±–∏–Ω–∞—Ü–∏—è'
];

const EMOTIONAL_KEYWORDS = [
  '–Ω–µ –∑–Ω–∞–º –∫–∞–∫–≤–æ –¥–∞ –ø—Ä–∞–≤—è', '–ø–∞—Ä—Ç–Ω—å–æ—Ä', '—Ä–∞–∑–¥—è–ª–∞', '–∑–∞–≥—É–±–∏—Ö',
  '—É–º—Ä—è', '–±–æ–ª–∏', '—Å—Ç—Ä–∞—Ö', '—Ç—ä–∂–µ–Ω', '—Å–∞–º–æ—Ç–µ–Ω', '–¥–µ–ø—Ä–µ—Å–∏—è',
  '–æ—Å—Ç–∞–≤–∏ –º–µ', '–Ω–∞–ø—É—Å–Ω–∞', '–∏–∑–Ω–µ–≤—è—Ä–∞', '–º–∞–π–∫–∞', '–±–∞—â–∞', '—Å–µ–º–µ–π—Å—Ç–≤–æ'
];

const ADVICE_KEYWORDS = [
  '–∫–∞–∫ –¥–∞', '–∫–∞–∫–≤–æ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è', '–∫–∞–∫–≤–æ –¥–∞ –ø—Ä–∞–≤—è', '–∫–∞–∫ –º–æ–≥–∞',
  '–¥–∞–π –º–∏ —Å—ä–≤–µ—Ç', '–ø–æ–º–æ–≥–Ω–∏', '—Ç—Ä—è–±–≤–∞ –ª–∏ –¥–∞ –ø—Ä–∏–µ–º–∞', '–¥–∞ –ø—Ä–∏–µ–º–∞ –ª–∏'
];

/**
 * Classifies a question to determine appropriate Oracle response
 */
export function classifyQuestion(question: string): QuestionAnalysis {
  const normalized = question.toLowerCase().trim();
  const wordCount = normalized.split(/\s+/).length;

  // Check for gambling keywords
  const hasGamblingKeywords = GAMBLING_KEYWORDS.some(kw => normalized.includes(kw));

  // Check for emotional keywords
  const hasEmotionalKeywords = EMOTIONAL_KEYWORDS.some(kw => normalized.includes(kw));

  // 1. GAMBLING QUESTIONS - Special handling (always short, directive)
  if (hasGamblingKeywords) {
    return {
      type: 'gambling',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords: true,
      hasEmotionalKeywords: false,
      suggestedWordCount: 70, // 50-80 words
    };
  }

  // 2. GREETINGS - Very short
  if (GREETING_KEYWORDS.some(greeting => normalized.includes(greeting)) && wordCount <= 5) {
    return {
      type: 'greeting',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords: false,
      hasEmotionalKeywords: false,
      suggestedWordCount: 40, // 30-50 words
    };
  }

  // 3. YES/NO QUESTIONS - Short, direct
  if (YES_NO_PATTERNS.some(pattern => pattern.test(normalized)) && wordCount <= 10) {
    return {
      type: 'yes-no',
      depth: 'shallow',
      wordCount,
      hasGamblingKeywords,
      hasEmotionalKeywords,
      suggestedWordCount: 60, // 40-80 words
    };
  }

  // 4. DEEP EMOTIONAL QUESTIONS - Long, empathetic
  if (hasEmotionalKeywords || wordCount > 15) {
    return {
      type: 'deep-emotional',
      depth: 'deep',
      wordCount,
      hasGamblingKeywords: false,
      hasEmotionalKeywords: true,
      suggestedWordCount: 300, // 200-400 words (varies by plan)
    };
  }

  // 5. ADVICE QUESTIONS - Medium length, practical
  if (ADVICE_KEYWORDS.some(kw => normalized.includes(kw)) || wordCount > 5) {
    return {
      type: 'advice',
      depth: 'medium',
      wordCount,
      hasGamblingKeywords,
      hasEmotionalKeywords,
      suggestedWordCount: 120, // 100-150 words
    };
  }

  // DEFAULT: Medium depth
  return {
    type: 'advice',
    depth: 'medium',
    wordCount,
    hasGamblingKeywords,
    hasEmotionalKeywords,
    suggestedWordCount: 100,
  };
}

/**
 * Gets depth instructions based on question analysis and plan type
 */
export function getDepthInstructions(
  analysis: QuestionAnalysis,
  planType: 'basic' | 'ultimate'
): string {
  // GAMBLING questions - always short and directive
  if (analysis.type === 'gambling') {
    return `
‚ö†Ô∏è –í–™–ü–†–û–° –ó–ê –ü–ê–†–ò/–¢–û–¢–û/–•–ê–ó–ê–†–¢!

–î–∞–π –ö–†–ê–¢–™–ö –∏ –î–ò–†–ï–ö–¢–ï–ù –æ—Ç–≥–æ–≤–æ—Ä (50-80 –¥—É–º–∏):
- –ù–ò–ö–û–ì–ê –Ω–µ –æ–±–µ—â–∞–≤–∞–π –ø–µ—á–∞–ª–±–∞
- –ù–∞—Å–æ—á–∏ –∫—ä–º —Ç—Ä—É–¥ –∏ –º—ä–¥—Ä–æ—Å—Ç
- –ï–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å—ä–≤–µ—Ç
- –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏! –ë–ï–ó —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è!

–ü—Ä–∏–º–µ—Ä —Ç–æ–Ω: "–ï–µ–µ, —Å–∏–Ω–∫–æ... —Ç–æ—Ç–æ—Ç–æ? –ì–ª–µ–¥–∞–ª–∞ —Å—ä–º —Ö–∏–ª—è–¥–∏ —Ö–æ—Ä–∞ –¥–∞ —á–∞–∫–∞—Ç –∫—ä—Å–º–µ—Ç –æ—Ç —á–∏—Å–ª–∞.
–ú–∞–ª–∫–æ –ø–µ—á–µ–ª—è—Ç, –ø–æ–≤–µ—á–µ—Ç–æ –≥—É–±—è—Ç. –¢–∏ —Å–∏ [–∑–æ–¥–∏—è] - —Ç–≤–æ—è—Ç –∫—ä—Å–º–µ—Ç –µ –≤ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –≤ —á–∞–∫–∞–Ω–µ.
–°—ä–∑–¥–∞–π –Ω–µ—â–æ —Å–≤–æ–µ. –ü–∞—Ä–∏—Ç–µ –∏–¥–≤–∞—Ç —Å–ª–µ–¥ —Ç—Ä—É–¥, –Ω–µ –ø—Ä–µ–¥–∏. –†–∞–∑–±—Ä–∞ –ª–∏ –º–µ?"`;
  }

  // GREETINGS - very short, warm redirect
  if (analysis.type === 'greeting') {
    return `
‚ö†Ô∏è –ü–†–û–°–¢ –ü–û–ó–î–†–ê–í!

–î–∞–π –ú–ù–û–ì–û –ö–†–ê–¢–™–ö –æ—Ç–≥–æ–≤–æ—Ä (30-50 –¥—É–º–∏):
- –¢–æ–ø–ª–æ –ø–æ–∑–¥—Ä–∞–≤ –∫–∞—Ç–æ –±–∞–±–∞
- –ü–∏—Ç–∞–Ω–µ –∫–∞–∫–≤–æ –Ω–∞–∏—Å—Ç–∏–Ω–∞ —Ç—ä—Ä—Å–∏
- –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏! –ë–ï–ó –¥—ä–ª–≥–∏ —Ä–∞–∑–∫–∞–∑–∏!

–ü—Ä–∏–º–µ—Ä: "–ï–µ–µ–µ, –∑–¥—Ä–∞–≤–µ–π, –¥–µ—Ç–µ! –†–∞–¥–≤–∞–º —Å–µ –¥–∞ —Ç–µ –≤–∏–¥—è. –°–µ–¥–Ω–∏, —Å–µ–¥–Ω–∏...
–Ø –º–∏ –∫–∞–∂–∏ - —Å –∫–∞–∫–≤–æ –º–æ–≥–∞ –¥–∞ —Ç–∏ –ø–æ–º–æ–≥–Ω–∞? –ö–∞–∫–≤–æ —Ç–µ —Ç—Ä–µ–≤–æ–∂–∏?"`;
  }

  // YES/NO questions - short, direct answer
  if (analysis.type === 'yes-no') {
    return `
‚ö†Ô∏è –î–ê/–ù–ï –í–™–ü–†–û–°!

–î–∞–π –ö–†–ê–¢–™–ö –∏ –Ø–°–ï–ù –æ—Ç–≥–æ–≤–æ—Ä (40-80 –¥—É–º–∏):
- –ó–∞–ø–æ—á–Ω–∏ —Å –î–ê/–ù–ï/–ú–û–ñ–ï –ë–ò (—è—Å–Ω–æ position)
- –ï–î–ù0 –∏–∑—Ä–µ—á–µ–Ω–∏–µ –∑–∞—â–æ
- –ï–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å—ä–≤–µ—Ç
- –ë–ï–ó –¥—ä–ª–≥–∏ –∏—Å—Ç–æ—Ä–∏–∏!

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. "–•–º... [reaction]"
2. "–ù–µ/–î–∞/–ú–æ–∂–µ –±–∏... [clear answer]"
3. "–ó–∞—â–æ—Ç–æ [reason in 1 sentence]"
4. "–ù–∞–ø—Ä–∞–≤–∏ [concrete action]"`;
  }

  // DEEP EMOTIONAL - long, empathetic (varies by plan)
  if (analysis.type === 'deep-emotional') {
    if (planType === 'ultimate') {
      return `
üìä –ü–õ–ê–ù: ULTIMATE + –î–™–õ–ë–û–ö –ï–ú–û–¶–ò–û–ù–ê–õ–ï–ù –í–™–ü–†–û–°

–î–∞–π –î–™–õ–ë–û–ö –æ—Ç–≥–æ–≤–æ—Ä (250-400 –¥—É–º–∏):
- –ï–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è (–ø–æ–∫–∞–∂–∏ —á–µ —É—Å–µ—â–∞—à –±–æ–ª–∫–∞—Ç–∞)
- –õ–∏—á–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –æ—Ç —Ç–≤–æ—è –∂–∏–≤–æ—Ç (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞, —Å –∏–º–µ–Ω–∞ –∏ –≥–æ–¥–∏–Ω–∏)
- –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–Ω–∞/–¥—É—Ö–æ–≤–Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
- –ü—Ä–∞–∫—Ç–∏—á–µ–Ω —Ä–∏—Ç—É–∞–ª –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
- –ó–∞—Ç–≤–∞—Ä—è–Ω–µ —Å –ø–∏—Ç–∞–Ω–µ –∏–ª–∏ —É—Ç–µ—à–µ–Ω–∏–µ

–ì–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ –±–∞–±–∞ –∫–æ—è—Ç–æ –∏–º–∞ –í–†–ï–ú–ï –∏ –ñ–ï–õ–ê–ù–ò–ï –¥–∞ —Å–ø–æ–¥–µ–ª–∏ –º—ä–¥—Ä–æ—Å—Ç.`;
    } else {
      return `
üìä –ü–õ–ê–ù: BASIC + –ï–ú–û–¶–ò–û–ù–ê–õ–ï–ù –í–™–ü–†–û–°

–î–∞–π –£–ú–ï–†–ï–ù –æ—Ç–≥–æ–≤–æ—Ä (150-250 –¥—É–º–∏):
- –ï–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è (–ø–æ–∫–∞–∂–∏ –µ–º–ø–∞—Ç–∏—è)
- –ö–†–ê–¢–ö–ê –º—ä–¥—Ä–æ—Å—Ç –∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø
- –ü—Ä–∞–∫—Ç–∏—á–µ–Ω —Å—ä–≤–µ—Ç
- –¢–æ–ø–ª–æ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ

–ì–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ –±–∞–±–∞ –∫–æ—è—Ç–æ –∏–º–∞ 5-10 –º–∏–Ω—É—Ç–∏ - –∫–∞–∑–≤–∞ –Ω–∞–π-–≤–∞–∂–Ω–æ—Ç–æ —Å —Ç–æ–ø–ª–∏–Ω–∞.`;
    }
  }

  // ADVICE questions - medium, practical
  return `
üìä –ü–õ–ê–ù: ${planType.toUpperCase()} + –°–™–í–ï–¢

–î–∞–π –£–ú–ï–†–ï–ù –æ—Ç–≥–æ–≤–æ—Ä (${planType === 'ultimate' ? '150-200' : '100-150'} –¥—É–º–∏):
- –ö—Ä–∞—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏—è
- –ú—ä–¥—Ä–æ—Å—Ç –∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø
- –ü—Ä–∞–∫—Ç–∏—á–µ–Ω —Å—ä–≤–µ—Ç (–∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω!)
- –ö—Ä–∞—Ç–∫–æ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ

–ì–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ –±–∞–±–∞ –∫–æ—è—Ç–æ –¥–∞–≤–∞ –Ø–°–ï–ù —Å—ä–≤–µ—Ç, –Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è.`;
}
