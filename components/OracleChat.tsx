"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Lock, Sparkles, Send, Loader2, MessageCircle } from "lucide-react";
import Link from "next/link";

interface OracleMessage {
  id?: number;
  question: string;
  answer: string;
  asked_at?: string;
}

interface OracleUsage {
  remaining: number;
  limit: number;
  allowed: boolean;
}

interface OracleChatProps {
  isPremium: boolean;
}

const MIN_QUESTION_LENGTH = 5;
const MAX_QUESTION_LENGTH = 500;

export function OracleChat({ isPremium }: OracleChatProps) {
  const [messages, setMessages] = useState<OracleMessage[]>([]);
  const [question, setQuestion] = useState("");
  const [loading, setLoading] = useState(false);
  const [loadingUsage, setLoadingUsage] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [usage, setUsage] = useState<OracleUsage | null>(null);

  useEffect(() => {
    if (isPremium) {
      loadConversations();
    }
  }, [isPremium]);

  async function loadConversations() {
    try {
      setLoadingUsage(true);
      const response = await fetch('/api/oracle?limit=5');
      if (response.ok) {
        const data = await response.json();
        setMessages(data.conversations || []);
        setUsage(data.usage);
      }
    } catch (err) {
      console.error('Failed to load conversations:', err);
    } finally {
      setLoadingUsage(false);
    }
  }

  async function askOracle(e: React.FormEvent) {
    e.preventDefault();

    if (!question.trim() || loading) return;

    // Validate minimum length
    if (question.trim().length < MIN_QUESTION_LENGTH) {
      setError(`–í—ä–ø—Ä–æ—Å—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ ${MIN_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–∞`);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/oracle', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: question.trim() }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to get Oracle response');
      }

      setMessages(prev => [data, ...prev]);
      setQuestion("");
      setUsage({ remaining: data.remaining, limit: data.limit, allowed: data.remaining > 0 });
    } catch (err) {
      console.error('Oracle error:', err);
      setError(err instanceof Error ? err.message : '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å –û—Ä–∞–∫—É–ª–∞');
    } finally {
      setLoading(false);
    }
  }

  if (!isPremium) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="text-center space-y-2">
          <h1 className="text-3xl font-bold gradient-text">
            üîÆ –í—Ä–∞—á–∫–∞—Ç–∞
          </h1>
          <p className="text-zinc-400">
            –°—Ç–∞—Ä–∞—Ç–∞ –ú—ä–¥—Ä–æ—Å—Ç –ü–æ–∑–Ω–∞–≤–∞ –¢–≤–æ—è—Ç–∞ –î—É—à–∞
          </p>
        </div>

        <Card className="glass-card border-accent-500/30">
          <CardContent className="pt-8 pb-8">
            <div className="text-center space-y-6">
              <div className="inline-flex p-6 bg-accent-900/20 rounded-full border border-accent-500/30">
                <Sparkles className="w-12 h-12 text-accent-400" />
              </div>

              <div className="space-y-3">
                <h2 className="text-2xl font-bold text-zinc-100">
                  –ú—ä–¥—Ä–∞ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –í—Ä–∞—á–∫–∞
                </h2>
                <p className="text-zinc-300 max-w-md mx-auto leading-relaxed">
                  –î–µ—Ç–µ, –≤–∏–∂–¥–∞–º —á–µ –¥—É—à–∞—Ç–∞ —Ç–∏ —Ç—ä—Ä—Å–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏. –¢–æ–≤–∞ –µ –¥–æ–±—Ä–µ.
                  <br /><br />
                  –í—Ä–∞—á–∫–∞—Ç–∞ –æ—Ç–≤–∞—Ä—è –≤—Ä–∞—Ç–∏ —Å–∞–º–æ –Ω–∞ —Ç–µ–∑–∏, –∫–æ–∏—Ç–æ —Å–∞ –≥–æ—Ç–æ–≤–∏ –¥–∞ –≤–ª—è–∑–∞—Ç.
                  –ë–µ–∑–ø–ª–∞—Ç–Ω–æ—Ç–æ –ø—ä—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ–∫–∞–∑–≤–∞ —Å–∞–º–æ –ø—ä—Ç—è - –¥–∞ –≤–∏–¥–∏—à –¥–∞–ª–∏ –∏—Å–∫–∞—à –¥–∞ –≤—ä—Ä–≤–∏—à.
                </p>
              </div>

              <div className="space-y-2 text-left max-w-sm mx-auto">
                <p className="text-sm text-zinc-400 font-semibold mb-3">
                  –ö–∞–∫–≤–æ –ø–∏—Ç–∞—Ç —Ö–æ—Ä–∞—Ç–∞:
                </p>
                {[
                  "–î–∞ –ø—Ä–∏–µ–º–∞ –ª–∏ –Ω–æ–≤–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞?",
                  "–û–±–∏—á–∞ –ª–∏ –º–µ –Ω–∞–∏—Å—Ç–∏–Ω–∞?",
                  "–ö–∞–∫–≤–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–æ–º–µ–Ω—è –≤ –∂–∏–≤–æ—Ç–∞ —Å–∏?",
                ].map((q, i) => (
                  <div
                    key={i}
                    className="px-4 py-3 bg-zinc-950/50 border border-zinc-800 rounded-lg text-sm text-zinc-300"
                  >
                    {q}
                  </div>
                ))}
              </div>

              <div className="flex items-center justify-center gap-2 text-accent-400">
                <Lock className="w-4 h-4" />
                <span className="text-sm font-semibold">–°–∞–º–æ –∑–∞ –≥–æ—Ç–æ–≤–∏—Ç–µ</span>
              </div>

              <div className="space-y-3">
                <Link
                  href="/pricing"
                  className="block w-full px-6 py-4 bg-accent-600 hover:bg-accent-700 text-white rounded-lg transition-all font-semibold text-lg shadow-lg text-center"
                >
                  –í–ª–µ–∑ –ø—Ä–∏ –í—Ä–∞—á–∫–∞—Ç–∞
                </Link>
                <p className="text-xs text-zinc-500">
                  Basic: 3 –≤—ä–ø—Ä–æ—Å–∞/–¥–µ–Ω ‚Ä¢ Ultimate: 10 –≤—ä–ø—Ä–æ—Å–∞/–¥–µ–Ω + –¥—ä–ª–±–æ–∫–∏ –ø—Ä–æ–∑—Ä–µ–Ω–∏—è
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in max-w-3xl mx-auto">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold gradient-text flex items-center justify-center gap-2">
          üîÆ –í—Ä–∞—á–∫–∞—Ç–∞
        </h1>
        <p className="text-zinc-400">
          –°—Ç–∞—Ä–∞—Ç–∞ –ú—ä–¥—Ä–æ—Å—Ç –ü–æ–∑–Ω–∞–≤–∞ –¢–≤–æ—è—Ç–∞ –î—É—à–∞
        </p>
        {usage && usage.allowed && (
          <p className="text-sm text-zinc-500">
            –î–Ω–µ—Å –º–æ–∂–µ—à –¥–∞ –ø–∏—Ç–∞—à –æ—â–µ {usage.remaining} {usage.remaining === 1 ? '–ø—ä—Ç' : '–ø—ä—Ç–∏'}
          </p>
        )}
        {usage && !usage.allowed && (
          <div className="inline-block px-4 py-2 bg-accent-950/30 border border-accent-600/50 rounded-lg">
            <p className="text-sm text-accent-300">
              üåô –î–Ω–µ—Å –≥–æ–≤–æ—Ä–∏—Ö–º–µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ, –¥–µ—Ç–µ
            </p>
          </div>
        )}
      </div>

      {error && (
        <div className="p-4 bg-red-950/30 border border-red-800/50 rounded-lg">
          <p className="text-red-300 text-sm">{error}</p>
        </div>
      )}

      {/* Compassionate closure when no questions left */}
      {usage && !usage.allowed && (
        <Card className="glass-card border-accent-500/30">
          <CardContent className="pt-8 pb-8">
            <div className="text-center space-y-6">
              <div className="text-6xl">üåô</div>
              <div className="space-y-3">
                <h3 className="text-xl font-bold text-zinc-100">
                  –î–Ω–µ—Å –≥–æ–≤–æ—Ä–∏—Ö–º–µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ, –¥–µ—Ç–µ
                </h3>
                <p className="text-zinc-300 max-w-md mx-auto leading-relaxed">
                  –î–∞–¥–æ—Ö —Ç–∏ {usage.limit} {usage.limit === 1 ? '–æ—Ç–≥–æ–≤–æ—Ä' : '–æ—Ç–≥–æ–≤–æ—Ä–∞'}. –°–µ–≥–∞ –µ –≤—Ä–µ–º–µ –¥–∞
                  –≥–∏ –ø—Ä–µ–∂–∏–≤–µ–µ—à, –Ω–µ –¥–∞ —Ç—ä—Ä—Å–∏—à –æ—â–µ –¥—É–º–∏.
                  <br /><br />
                  –£—Ç—Ä–µ, –∫–æ–≥–∞—Ç–æ —Å–µ —Å—ä–±—É–¥–∏—à, —â–µ —Ç–µ —á–∞–∫–∞–º —Å –Ω–æ–≤–∏ –ø—Ä–æ–∑—Ä–µ–Ω–∏—è.
                </p>
              </div>

              <div className="space-y-3">
                {messages.length > 0 && (
                  <button
                    onClick={() => {
                      const historySection = document.getElementById('oracle-history');
                      historySection?.scrollIntoView({ behavior: 'smooth' });
                    }}
                    className="w-full px-6 py-3 border border-accent-600 text-accent-300 rounded-lg hover:bg-accent-900/20 transition-colors"
                  >
                    –ü—Ä–µ–≥–ª–µ–¥–∞–π –¥–Ω–µ—à–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏
                  </button>
                )}
                <div className="pt-4 border-t border-zinc-800">
                  <p className="text-sm text-zinc-500 mb-3">
                    ~ –ó–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –º—ä–¥—Ä–æ—Å—Ç ~
                  </p>
                  <Link
                    href="/pricing"
                    className="block w-full px-6 py-3 bg-accent-600 hover:bg-accent-700 text-white rounded-lg transition-colors font-semibold"
                  >
                    {usage.limit === 3 ? 'Ultimate –ø–ª–∞–Ω—ä—Ç –æ—Ç–≤–∞—Ä—è –≤—Ä–∞—Ç–∞—Ç–∞' : '–í–∏–∂ Premium –ø–ª–∞–Ω–æ–≤–µ—Ç–µ'}
                  </Link>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Loading state while fetching usage */}
      {loadingUsage && (
        <Card className="glass-card">
          <CardContent className="pt-8 pb-8">
            <div className="flex items-center justify-center gap-3">
              <Loader2 className="w-6 h-6 text-accent-400 animate-spin" />
              <span className="text-zinc-400">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Question form - only show if has remaining questions */}
      {!loadingUsage && usage && usage.allowed && (
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-zinc-50 flex items-center gap-2">
              <MessageCircle className="w-5 h-5 text-accent-400" />
              –ó–∞–¥–∞–π –≤—ä–ø—Ä–æ—Å –Ω–∞ –í—Ä–∞—á–∫–∞—Ç–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
          <form onSubmit={askOracle} className="space-y-4">
            <textarea
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="–ö–∞–∫–≤–æ —Ç–µ —Ç—Ä–µ–≤–æ–∂–∏? –ó–∞–¥–∞–π –≤—ä–ø—Ä–æ—Å–∞ —Å–∏ –∫—ä–º –í—Ä–∞—á–∫–∞—Ç–∞..."
              rows={4}
              maxLength={MAX_QUESTION_LENGTH}
              disabled={loading}
              className="w-full px-4 py-3 bg-zinc-950/50 border border-zinc-800 rounded-lg text-zinc-200 placeholder:text-zinc-600 focus:outline-none focus:ring-2 focus:ring-accent-600 resize-none disabled:opacity-50"
            />
            <div className="flex items-center justify-between">
              <div className="text-xs">
                {question.trim().length > 0 && question.trim().length < MIN_QUESTION_LENGTH ? (
                  <span className="text-red-400">
                    –ú–∏–Ω–∏–º—É–º {MIN_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–∞ (–æ—â–µ {MIN_QUESTION_LENGTH - question.trim().length})
                  </span>
                ) : (
                  <span className="text-zinc-500">{question.length} / {MAX_QUESTION_LENGTH}</span>
                )}
              </div>
              <button
                type="submit"
                disabled={loading || question.trim().length < MIN_QUESTION_LENGTH}
                className="px-6 py-3 bg-accent-600 hover:bg-accent-700 disabled:bg-zinc-700 disabled:cursor-not-allowed text-white rounded-lg transition-colors font-semibold flex items-center gap-2"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    –ü–∏—Ç–∞–º –í—Ä–∞—á–∫–∞—Ç–∞...
                  </>
                ) : (
                  <>
                    <Send className="w-5 h-5" />
                    –ó–∞–¥–∞–π –≤—ä–ø—Ä–æ—Å
                  </>
                )}
              </button>
            </div>
          </form>
        </CardContent>
      </Card>
      )}

      {messages.length > 0 && (
        <div id="oracle-history" className="space-y-4">
          <h2 className="text-xl font-bold text-zinc-200">–¢–≤–æ–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏ —Å –í—Ä–∞—á–∫–∞—Ç–∞</h2>
          {messages.map((msg, index) => (
            <Card key={msg.id || index} className="glass-card">
              <CardContent className="pt-6 space-y-4">
                <div className="p-4 bg-zinc-950/50 rounded-lg border-l-4 border-accent-600">
                  <p className="text-sm text-zinc-400 mb-1">–¢–≤–æ—è—Ç –≤—ä–ø—Ä–æ—Å:</p>
                  <p className="text-zinc-200">{msg.question}</p>
                </div>
                <div className="p-4 bg-accent-950/30 rounded-lg border-l-4 border-accent-400">
                  <p className="text-sm text-accent-300 mb-2 font-semibold flex items-center gap-2">
                    <Sparkles className="w-4 h-4" />
                    –í—Ä–∞—á–∫–∞—Ç–∞ –∫–∞–∑–≤–∞:
                  </p>
                  <p className="text-zinc-200 leading-relaxed whitespace-pre-wrap">{msg.answer}</p>
                </div>
                {msg.asked_at && (
                  <p className="text-xs text-zinc-600 text-right">
                    {new Date(msg.asked_at).toLocaleDateString('bg-BG', {
                      day: 'numeric',
                      month: 'long',
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit',
                    })}
                  </p>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {messages.length === 0 && !loading && usage && usage.allowed && (
        <Card className="glass-card">
          <CardContent className="pt-8 pb-8 text-center">
            <div className="text-6xl mb-4">üîÆ</div>
            <p className="text-zinc-400">–û—â–µ –Ω—è–º–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä–∏ —Å –í—Ä–∞—á–∫–∞—Ç–∞</p>
            <p className="text-sm text-zinc-500 mt-2">–ó–∞–¥–∞–π –ø—ä—Ä–≤–∏—è —Å–∏ –≤—ä–ø—Ä–æ—Å –≥–æ—Ä–µ –∏ —Ç—è —â–µ —Ç–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
